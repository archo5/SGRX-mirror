
// --- BASE PROPS ---

function ENTBASE_named( eptr )
{
	EE_AddFieldString( eptr, "name", "Name", "" );
}

function ENTBASE_xform( eptr )
{
	EE_AddFieldVec3( eptr, "rot_angles", "Rotation", 0, 2, 0, 360 );
	EE_AddFieldFloat( eptr, "scale_uni", "Scale (uniform)", 1, 2, 0.01, 100 );
	EE_AddFieldVec3( eptr, "scale_sep", "Scale (separate)", 1, 2, 0.01, 100 );
}

function ENTBASE_subxform( eptr, pfx, doff )
{
	EE_AddFieldVec3( eptr, pfx $ "_offset", "[" $ pfx $ "] Offset", doff, 2, -100, 100 );
	EE_AddFieldVec3( eptr, pfx $ "_rot_angles", "[" $ pfx $ "] Rotation", 0, 2, 0, 360 );
	EE_AddFieldFloat( eptr, pfx $ "_scale_uni", "[" $ pfx $ "] Scale (uniform)", 1, 2, 0.01, 100 );
	EE_AddFieldVec3( eptr, pfx $ "_scale_sep", "[" $ pfx $ "] Scale (separate)", 1, 2, 0.01, 100 );
}

function ENTBASE_xfmesh( eptr )
{
	ENTBASE_xform( eptr );
	EE_AddFieldMesh( eptr, "mesh", "Mesh", "" );
}

function ENTBASE_xfchar( eptr )
{
	ENTBASE_xform( eptr );
	EE_AddFieldChar( eptr, "char", "Character", "" );
}

function ENTBASE_trigger( eptr )
{
	EE_AddFieldScrFn( eptr, "func", "Script function", "" );
	EE_AddFieldString( eptr, "target", "Target object", "" );
	EE_AddFieldBool( eptr, "once", "Call once", false );
}

function ENTBASE_viewdir( eptr )
{
	EE_AddFieldVec3( eptr, "viewdir", "Initial view direction", vec3(1,0,0), 2, -100, 100 );
}

// --- CALLBACK FUNCS ---

function ENTCHG_xfmesh( eptr, data )
{
	lmdetail = @data.lmquality ?? 1.0;
	flags =
		( tobool( @data.solid ?? true ) * LM_MESHINST_SOLID ) |
		( tobool( @data.dynlit ?? false ) * LM_MESHINST_DYNLIT ) |
		( tobool( @data.castlms ?? true ) * LM_MESHINST_CASTLMS );
	mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
	EE_SetMeshInstanceCount( eptr, 1 );
	EE_SetMeshInstanceData( eptr, 0, "meshes/" $ data.mesh $ ".ssm", mtx, flags, lmdetail );
}

function ENTCHG_xfchar( eptr, data )
{
	mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
	EE_SetChar( eptr, "chars/" $ data.char $ ".chr", mtx );
}

function ENTDD_xfmesh( eptr, data )
{
	(bbmin,bbmax) = EE_GetMeshAABB( eptr, 0 );
	
	BR_Reset();
	BR_Col( 0.2, 0.7, 0.9, 0.8 );
	mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
	BR_AABB( bbmin, bbmax, mtx );
}

function ENTDD_startpos( eptr, data )
{
	BR_Reset();
	BR_Col( 0.9, 0.2, 0.1, 0.8 );
	BR_SetPrimitiveType( PT_Lines );
	BR_Pos( data.position ); BR_Pos( data.position + data.viewdir );
}

// --- ENTITIES ---

function ED_ENT_scritem( eptr )
{
	EE_AddFieldScrItem( eptr, "scritem", "Scripted item", "" );
	EE_SetChangeFunc( eptr, function ScrItem_onChange( eptr, data )
	{
		EE_SetScriptedItem( eptr, data.scritem.__type, data.scritem );
	});
}

function ED_ENT_player_start( eptr )
{
	ENTBASE_viewdir( eptr );
	EE_SetDebugDrawFunc( eptr, ENTDD_startpos );
}

function ED_ENT_enemy_start( eptr )
{
	ENTBASE_named( eptr );
	ENTBASE_viewdir( eptr );
	EE_SetDebugDrawFunc( eptr, ENTDD_startpos );
}

function ED_ENT_camera_start( eptr )
{
	ENTBASE_viewdir( eptr );
	EE_SetDebugDrawFunc( eptr, ENTDD_startpos );
}

function ED_ENT_marker( eptr )
{
	ENTBASE_named( eptr );
	EE_SetDebugDrawFunc( eptr, function Marker_onDebugDraw( eptr, data )
	{
		BR_Reset();
		BR_Col( 0.9, 0.2, 0.1, 0.8 );
		BR_Tick( data.position, 0.1 );
	});
}

function ED_ENT_solidbox( eptr )
{
	ENTBASE_xform( eptr );
	EE_SetDebugDrawFunc( eptr, function SolidBox_onDebugDraw( eptr, data )
	{
		BR_Reset();
		BR_Col( 0.2, 0.3, 0.8, 0.8 );
		BR_AABB( -1, 1, EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position ) );
	});
}

function ED_ENT_trigger( eptr )
{
	ENTBASE_xform( eptr );
	ENTBASE_trigger( eptr );
	EE_SetDebugDrawFunc( eptr, function Trigger_onDebugDraw( eptr, data )
	{
		BR_Reset();
		BR_Col( 0.2, 0.8, 0.1, 0.8 );
		BR_AABB( -1, 1, EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position ) );
	});
}

function ED_ENT_trigger_prox( eptr )
{
	EE_AddFieldFloat( eptr, "distance", "Test distance", 1, 2, 0.01, 100 );
	ENTBASE_trigger( eptr );
	EE_SetDebugDrawFunc( eptr, function TriggerProx_onDebugDraw( eptr, data )
	{
		BR_Reset();
		BR_Col( 0.2, 0.6, 0.1, 0.8 );
		BR_Tick( data.position, data.scan_distance );
		BR_SphereOutline( data.position, data.scan_distance, 32 );
	});
}

function ED_ENT_m3sh( eptr )
{
	ENTBASE_xfmesh( eptr );
	EE_AddFieldFloat( eptr, "lmquality", "Lightmap quality", 1, 2, 0.01, 100 );
	EE_AddFieldBool( eptr, "solid", "Solid", true );
	EE_AddFieldBool( eptr, "dynlit", "Dyn.lighting", false );
	EE_AddFieldBool( eptr, "castlms", "Casts lightmap shadow (dyn)", true );
	EE_SetChangeFunc( eptr, ENTCHG_xfmesh );
	EE_SetDebugDrawFunc( eptr, ENTDD_xfmesh );
}

function ED_ENT_mesharray( eptr )
{
	ENTBASE_xfmesh( eptr );
	EE_AddFieldVec3( eptr, "offset", "Relative offset", vec3(0,0,1), 2, -128, 128 );
	EE_AddFieldInt( eptr, "count", "Count", 1, 1, 128 );
	EE_SetChangeFunc( eptr, function MeshArray_onChange( eptr, data )
	{
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		path = "meshes/" $ data.mesh $ ".ssm";
		EE_SetMeshInstanceCount( eptr, data.count );
		for( i = 0; i < data.count; ++i )
		{
			suboff = data.offset * i;
			submtx = mat4().translate_v3( suboff ).multiply( mtx );
			EE_SetMeshInstanceData( eptr, i, path, submtx );
		}
	});
	EE_SetDebugDrawFunc( eptr, function MeshArray_onDebugDraw( eptr, data )
	{
		BR_Reset();
		BR_Col( 0.2, 0.7, 0.9, 0.8 );
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		for( i = 0; i < data.count; ++i )
		{
			(bbmin,bbmax) = EE_GetMeshAABB( eptr, i );
			suboff = data.offset * i;
			submtx = mat4().translate_v3( suboff ).multiply( mtx );
			BR_AABB( bbmin, bbmax, submtx );
		}
	});
}

function ED_ENT_door_slide( eptr )
{
	ENTBASE_named( eptr );
	ENTBASE_xfmesh( eptr );
	EE_AddFieldFloat( eptr, "open_time", "Opening time", 1, 2, 0.01, 100 );
	EE_AddFieldVec3( eptr, "open_offset", "Opening offset", vec3(0,0,1), 2, -128, 128 );
	EE_AddFieldVec3( eptr, "open_rot_angles", "Opening rotation", 0, 2, 0, 360 );
	EE_AddFieldBool( eptr, "is_switch", "Is switchable", false );
	EE_AddFieldScrFn( eptr, "pred", "Switch test function", "" );
	ENTBASE_trigger( eptr );
	EE_SetChangeFunc( eptr, ENTCHG_xfmesh );
	EE_SetDebugDrawFunc( eptr, function DoorSlideProx_onDebugDraw( eptr, data )
	{
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		(bbmin,bbmax) = EE_GetMeshAABB( eptr, 0 );
		BR_Reset();
		BR_Col( 0.2, 0.8, 0.1, 0.8 );
		BR_AABB( bbmin, bbmax, mtx );
		BR_Col( 0.7, 0.1, 0.1, 0.8 );
		BR_SetPrimitiveType( PT_Lines );
		BR_Pos( mtx.transform_pos( 0 ) ); BR_Pos( mtx.transform_pos( data.open_offset ) );
	});
}

function ED_ENT_door_slide_prox( eptr )
{
	ENTBASE_xfmesh( eptr );
	EE_AddFieldFloat( eptr, "open_time", "Opening time", 1, 2, 0.01, 100 );
	EE_AddFieldVec3( eptr, "open_offset", "Opening offset", vec3(0,0,1), 2, -128, 128 );
	EE_AddFieldVec3( eptr, "scan_offset", "Scanner offset", vec3(0,0,0), 2, -128, 128 );
	EE_AddFieldFloat( eptr, "scan_distance", "Scanner distance", 1, 2, 0.01, 100 );
	EE_SetChangeFunc( eptr, ENTCHG_xfmesh );
	EE_SetDebugDrawFunc( eptr, function DoorSlideProx_onDebugDraw( eptr, data )
	{
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		(bbmin,bbmax) = EE_GetMeshAABB( eptr, 0 );
		BR_Reset();
		BR_Col( 0.2, 0.8, 0.1, 0.8 );
		BR_AABB( bbmin, bbmax, mtx );
		BR_Col( 0.2, 0.6, 0.1, 0.8 );
		wsp = mtx.transform_pos( data.scan_offset );
		BR_Tick( wsp, data.scan_distance );
		BR_SphereOutline( wsp, data.scan_distance, 32 );
		BR_Col( 0.7, 0.1, 0.1, 0.8 );
		BR_SetPrimitiveType( PT_Lines );
		BR_Pos( mtx.transform_pos( 0 ) ); BR_Pos( mtx.transform_pos( data.open_offset ) );
	});
}

function ED_ENT_particle_fx( eptr )
{
	ENTBASE_xform( eptr );
	EE_AddFieldPartSys( eptr, "partsys", "Particle system", "" );
	EE_AddFieldSound( eptr, "soundevent", "Sound event", "" );
	ENTBASE_named( eptr );
	EE_AddFieldBool( eptr, "start", "Play on startup", true );
	EE_SetDebugDrawFunc( eptr, function Trigger_onDebugDraw( eptr, data )
	{
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		BR_Reset();
		BR_Col( 0.2, 0.8, 0.1, 0.8 );
		BR_AABB( -1, 1, mtx );
		BR_Col( 0.7, 0.1, 0.1, 0.8 );
		BR_SetPrimitiveType( PT_Lines );
		BR_Pos( mtx.transform_pos( 0 ) ); BR_Pos( mtx.transform_pos( vec3(0,0,1) ) );
	});
}

function ED_ENT_pickup( eptr )
{
	ENTBASE_xfmesh( eptr );
	ENTBASE_named( eptr );
	EE_AddFieldString( eptr, "id", "ID", "" );
	EE_AddFieldInt( eptr, "count", "Count", 1, 1, 10000 );
	EE_SetChangeFunc( eptr, ENTCHG_xfmesh );
	EE_SetDebugDrawFunc( eptr, ENTDD_xfmesh );
}

function ED_ENT_camera( eptr )
{
	ENTBASE_xfchar( eptr );
	ENTBASE_named( eptr );
	EE_AddFieldVec3( eptr, "dir0", "Direction 0", vec3(1,0.5,-1), 2, -128, 128 );
	EE_AddFieldVec3( eptr, "dir1", "Direction 1", vec3(1,-0.5,-1), 2, -128, 128 );
	EE_SetChangeFunc( eptr, ENTCHG_xfchar );
	EE_SetDebugDrawFunc( eptr, function Camera_onDebugDraw( eptr, data )
	{
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		BR_Reset();
		BR_SetPrimitiveType( PT_Lines );
		BR_Col( 0.1, 0.5, 0.1, 0.9 );
		BR_Pos( mtx.transform_pos(vec3(0)) ); BR_Pos( mtx.transform_pos(data.dir0) );
		BR_Col( 0.1, 0.9, 0.1, 0.9 );
		BR_Pos( mtx.transform_pos(vec3(0)) ); BR_Pos( mtx.transform_pos(data.dir1) );
	});
}

function ED_ENT_actionable( eptr )
{
	ENTBASE_xfmesh( eptr );
	ENTBASE_named( eptr );
	EE_AddFieldVec3( eptr, "place_offset", "Placement offset", vec3(0,0,0), 2, -128, 128 );
	EE_AddFieldVec3( eptr, "place_dir", "Placement direction", vec3(0,0,0), 2, -128, 128 );
	EE_SetChangeFunc( eptr, ENTCHG_xfmesh );
	EE_SetDebugDrawFunc( eptr, function Actionable_onDebugDraw( eptr, data )
	{
		mtx = EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position );
		poff = mtx.transform_pos( data.place_offset );
		pdiroff = mtx.transform_pos( data.place_offset + data.place_dir );
		BR_Reset();
		BR_Col( 0.9, 0.2, 0.1, 0.8 );
		BR_Tick( data.position, 0.1 );
		BR_Col( 0.5, 0.2, 0.1, 0.8 );
		BR_Tick( poff, 0.08 );
		BR_Col( 0.1, 0.2, 0.1, 0.8 );
		BR_SetPrimitiveType( PT_Lines );
		BR_Pos( poff ); BR_Pos( pdiroff );
	});
}

function ED_ENT_cover( eptr )
{
	ENTBASE_named( eptr );
	ENTBASE_xform( eptr );
	EE_SetDebugDrawFunc( eptr, function Cover_onDebugDraw( eptr, data )
	{
		BR_Reset();
		BR_Col( 0.8, 0.2, 0.9, 0.8 );
		BR_AABB( -1, 1, EE_GenMatrix_SRaP( data.scale_sep * data.scale_uni, data.rot_angles, data.position ) );
	});
}

