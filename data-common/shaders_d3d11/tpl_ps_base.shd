
#include "tpl_common"

Texture2D Tex0 : register(t0);
Texture2D Tex1 : register(t1);
Texture2D Tex2 : register(t2);
Texture2D Tex3 : register(t3);
Texture2D Tex4 : register(t4);
Texture2D Tex5 : register(t5);
Texture2D Tex6 : register(t6);
Texture2D Tex7 : register(t7);
Texture2D InstTex0 : register(t8);
TextureCube InstTex1 : register(t9);
TextureCube InstTex2 : register(t10);
TextureCube InstTex3 : register(t11);

SamplerState Samp0 : register(s0);
SamplerState Samp1 : register(s1);
SamplerState Samp2 : register(s2);
SamplerState Samp3 : register(s3);
SamplerState Samp4 : register(s4);
SamplerState Samp5 : register(s5);
SamplerState Samp6 : register(s6);
SamplerState Samp7 : register(s7);
SamplerState InstSamp0 : register(s8);
SamplerState InstSamp1 : register(s9);
SamplerState InstSamp2 : register(s10);
SamplerState InstSamp3 : register(s11);

void main
(
	float4 inViewPos : TEXCOORD4,
	float4 inTangentSign : TEXCOORD6,
	float3 inNormal : TEXCOORD7,
	float4 icol : COLOR0,
	float4 inTex0 : TEXCOORD0,
	float4 inTex1 : TEXCOORD1,
	out float4 _outColor0 : SV_TARGET0,
	out float4 _outColor1 : SV_TARGET1,
	out float4 _outColor2 : SV_TARGET2
)
{
	float RdotV, specAmount;
	
	float3 viewPos = inViewPos.xyz;
	float4 projPos = mul( mProj, inViewPos );
	float3 viewDir = normalize( viewPos );
	
	float3 T = inTangentSign.xyz;
	float3 B = cross( inNormal, inTangentSign.xyz ) * inTangentSign.w;
	float3 N = inNormal;
	
	float3x3 TBN = float3x3( T, B, N );
	
	float3 outDiffuseColor = float3( 0.7, 0.7, 0.7 );
	float outOpacity = 1.0;
	float3 outSpecularColor = float3( 0.3, 0.3, 0.3 );
	float outSpecularPower = 32;
	float3 outNormal = inNormal;
	float2 outDistortion = float2( 0, 0 );
	float3 outAmbientDiffuseLight = float3( 0, 0, 0 );
	float3 outAmbientSpecularLight = float3( 0, 0, 0 );
	float3 outEmissiveLight = float3( 0, 0, 0 );
	{
__CODE__
	}
	outNormal = normalize( outNormal );
	
	float3 refView = reflect( viewDir, outNormal );
	float3 refWorld = mul( mInvView, float4( refView, 0 ) ).xyz;
	
	float3 totalDiffuse = /* gAmbLightColor + */ outAmbientDiffuseLight;
	float3 totalSpecular = outAmbientSpecularLight + InstTex1.Sample( InstSamp1, float4( refWorld.xzy, 0 ) ).rgb;
	
	/* DIRECTIONAL LIGHT */
//	totalDiffuse += saturate( dot( outNormal, gDirLightDir ) ) * gDirLightColor;
	RdotV = saturate( dot( reflect( gDirLightDir, outNormal ), viewDir ) );
	specAmount = pow( RdotV, outSpecularPower ) * sqrt( outSpecularPower );
//	totalSpecular += gDirLightColor * specAmount;
	
	/* POINT LIGHTS */
	for( int i = 0; i < gLightCounts.x; ++i )
	{
		PointLight PL = gPLights[ i ];
		float3 lightDir = PL.viewPos - viewPos;
		float lightDist = length( lightDir );
		lightDir /= lightDist;
		
		float distFactor = pow( 1 - saturate( lightDist / PL.range ), PL.power );
		float NdotL = saturate( dot( outNormal, lightDir ) );
		
		RdotV = saturate( dot( reflect( lightDir, outNormal ), viewDir ) );
		specAmount = pow( RdotV, outSpecularPower ) * sqrt( outSpecularPower );
		
		totalDiffuse += PL.color * NdotL * distFactor;
		totalSpecular += PL.color * specAmount * distFactor;
	}
	
	_outColor0 = float4( totalDiffuse * outDiffuseColor + totalSpecular * outSpecularColor + outEmissiveLight, outOpacity );
	_outColor1 = float4( outDistortion, 0, outOpacity );
	_outColor2 = float4( inViewPos.z, 0, 0, 1 );
}

