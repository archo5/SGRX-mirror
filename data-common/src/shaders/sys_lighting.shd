#include "__eq"


struct PointLight /* size: 2c */
{
	float4 vposrad;
	float4 colpow;
};
struct SpotLight /* size: 4c */
{
	PointLight PL;
	float4 vdirang;
	float4 shminfo;
};


UNIFORM_BUFFER( core_data, 0 )
	UNIFORM_VAR( float4x4 mView, 0 );
	UNIFORM_VAR( float4x4 mProj, 4 );
	UNIFORM_VAR( float4x4 mInvView, 8 );
	UNIFORM_VAR( float3 cameraPos, 12 );
	UNIFORM_VAR( float4 timeVals, 13 );
	UNIFORM_VAR( float4 viewportSizeInv, 14 );
	UNIFORM_VAR( float3 gAmbLightColor, 15 );
	UNIFORM_VAR( float3 gDirLightDir, 16 );
	UNIFORM_VAR( float3 gDirLightColor, 17 );
UNIFORM_BUFFER_END;

UNIFORM_BUFFER( instance_data, 1 )
	UNIFORM_VAR( float4x4 mWorld, 17 );
	UNIFORM_VAR( float4x4 mWorldView, 21 );
	UNIFORM_VAR( float4 gInstanceData[16], 25 );
UNIFORM_BUFFER_END;

UNIFORM_BUFFER( instance_light_count, 2 )
	UNIFORM_VAR( float2 gLightCounts, 41 );
UNIFORM_BUFFER_END;

#ifdef SKIN
UNIFORM_BUFFER( skin_matrices, 3 )
	UNIFORM_VAR( float4x4 mSkin[32], 42 );
UNIFORM_BUFFER_END;
#endif // SKIN

#if NUM_POINTLIGHTS > 0
UNIFORM_BUFFER( point_light_data, 4 )
	UNIFORM_VAR( PointLight gPLights[16], 170 );
UNIFORM_BUFFER_END;
#endif // NUM_POINTLIGHTS > 0

#if NUM_SPOTLIGHTS > 0
UNIFORM_BUFFER( spot_light_data_vs, 5 )
	UNIFORM_VAR( float4x4 mSpotLight[ NUM_SPOTLIGHTS ], 202 );
UNIFORM_BUFFER_END;

UNIFORM_BUFFER( spot_light_data_ps, 6 )
	UNIFORM_VAR( SpotLight gSLights[ NUM_SPOTLIGHTS ], 210 );
UNIFORM_BUFFER_END;
#endif // NUM_SPOTLIGHTS > 0


#if NUM_SPOTLIGHTS > 1
#  define SGRX_SPOTLIGHT_DATA( id0, id1 ) \
	float4 SLPPos0 : TEXCOORD##id0; \
	float4 SLPPos1 : TEXCOORD##id1;
#  define SGRX_SPOTLIGHT_VS_TRANSFER( o, worldPos ) \
	o.SLPPos0 = mul( mSpotLight[0], float4( worldPos, 1 ) ); \
	o.SLPPos1 = mul( mSpotLight[1], float4( worldPos, 1 ) );
#elif NUM_SPOTLIGHTS > 0
#  define SGRX_SPOTLIGHT_DATA( id0, id1 ) \
	float4 SLPPos0 : TEXCOORD##id0;
#  define SGRX_SPOTLIGHT_VS_TRANSFER( o, worldPos ) \
	o.SLPPos0 = mul( mSpotLight[0], worldPos );
#else
#  define SGRX_SPOTLIGHT_DATA( id0, id1 )
#  define SGRX_SPOTLIGHT_VS_TRANSFER( o, worldPos )
#endif


#ifdef SKIN
#  define SGRX_SKIN_MESH( i ) i.pos = \
		mul( mSkin[ i.idcs[0] ], float4( i.pos, 1 ) ).xyz * i.wts[0] + \
		mul( mSkin[ i.idcs[1] ], float4( i.pos, 1 ) ).xyz * i.wts[1] + \
		mul( mSkin[ i.idcs[2] ], float4( i.pos, 1 ) ).xyz * i.wts[2] + \
		mul( mSkin[ i.idcs[3] ], float4( i.pos, 1 ) ).xyz * i.wts[3]; \
	i.tan.xyz = \
		mul( mSkin[ i.idcs[0] ], i.tan.xyz ) * i.wts[0] + \
		mul( mSkin[ i.idcs[1] ], i.tan.xyz ) * i.wts[1] + \
		mul( mSkin[ i.idcs[2] ], i.tan.xyz ) * i.wts[2] + \
		mul( mSkin[ i.idcs[3] ], i.tan.xyz ) * i.wts[3]; \
	i.nrm = \
		mul( mSkin[ i.idcs[0] ], i.nrm ) * i.wts[0] + \
		mul( mSkin[ i.idcs[1] ], i.nrm ) * i.wts[1] + \
		mul( mSkin[ i.idcs[2] ], i.nrm ) * i.wts[2] + \
		mul( mSkin[ i.idcs[3] ], i.nrm ) * i.wts[3];
#else
#  define SGRX_SKIN_MESH( i )
#endif


NEEDS_TEXTURE_2D(0);
NEEDS_TEXTURE_2D(1);
NEEDS_TEXTURE_2D(2);
NEEDS_TEXTURE_2D(3);
NEEDS_TEXTURE_2D(4);
NEEDS_TEXTURE_2D(5);
NEEDS_TEXTURE_2D(6);
NEEDS_TEXTURE_2D(7);
NEEDS_TEXTURE_2D(8);
NEEDS_TEXTURE_2D(9);
NEEDS_TEXTURE_CUBE(10);
NEEDS_TEXTURE_2D(11);
#define InstTex0 Tex8
#define InstTex1 Tex9
#define InstTex2 Tex10
#define InstTex3 Tex11

#ifdef NUM_SPOTLIGHTS
NEEDS_TEXTURE_2D(12);
NEEDS_TEXTURE_SM(13);
NEEDS_TEXTURE_2D(14);
NEEDS_TEXTURE_SM(15);
#endif


float3 ModelToWorldPos( float3 p ){ return mul( mWorld, float4( p, 1 ) ).xyz; }
float3 ModelToWorldDir( float3 d ){ return mul( mWorld, float4( d, 0 ) ).xyz; }
float3 WorldToViewPos( float3 p ){ return mul( mView, float4( p, 1 ) ).xyz; }
float3 WorldToViewDir( float3 d ){ return mul( mView, float4( d, 0 ) ).xyz; }
float3 ModelToViewPos( float3 p ){ return mul( mWorldView, float4( p, 1 ) ).xyz; }
float3 ViewToWorldDir( float3 d ){ return mul( mInvView, float4( d, 0 ) ).xyz; }
float4 ViewToProjPos( float3 p ){ return mul( mProj, float4( p, 1 ) ); }

float3x3 CreateTBNMatrix( float3 normal, float4 tangent )
{
	tangent.xyz = normalize( tangent.xyz );
	normal = normalize( normal );
	float3 bitangent = normalize( cross( normal, tangent.xyz ) * tangent.w );
	return float3x3( tangent.xyz, bitangent, normal );
}

float4 DiffuseTexGamma( float4 col )
{
	col.rgb *= col.rgb;
	return col;
}


struct vsinput_particle
{
	float4 pos : POSITION0;
	float4 col : COLOR0;
	float4 tex : TEXCOORD0;
};

struct vsinput_mesh
{
	float3 pos : POSITION0;
	float3 nrm : NORMAL0;
	float4 tan : TANGENT0;
	float4 col : COLOR0;
#ifdef SKIN
	float4 wts : BLENDWEIGHT0;
	BLENDIDX_UINT8_4_TYPE idcs : BLENDINDICES0;
#endif
	float4 tex0 : TEXCOORD0;
	float4 tex1 : TEXCOORD1;
};

struct VS2PS
{
	float4 tex0 : TEXCOORD0;
	float4 tex1 : TEXCOORD1;
	float3 viewPos : TEXCOORD2;
	float3 N : TEXCOORD3;
	float4 T : TEXCOORD4;
	float4 col : COLOR0;
	SGRX_SPOTLIGHT_DATA( 5, 6 )
	float4 pos : SEMANTIC_VSOUT_POS;
};

struct SurfaceInput
{
	float3 viewPos;
	float4 projPos;
	float3 viewDir;
	float4 inTex0;
	float4 inTex1;
	float3 inNormal;
	float4 inTangentSign;
	float4 icol;
	float3x3 TBN;
};

struct SurfaceInfo
{
	float4 diffuseColor;
	float3 specularColor;
	float glossiness;
	float3 normal;
	float2 distortion;
	float3 emissiveLight;
};

void InitSurfaceInfo( out SurfaceInfo info )
{
	info.diffuseColor = float4( 0.7, 0.7, 0.7, 1 );
	info.specularColor = float3( 0.3, 0.3, 0.3 );
	info.glossiness = 0.5;
	info.normal = float3( 0, 0, 1 );
	info.distortion = float2( 0, 0 );
	info.emissiveLight = float3( 0, 0, 0 );
}


#ifndef LIGHT_MULTIPLIER
#define LIGHT_MULTIPLIER 4
#endif
