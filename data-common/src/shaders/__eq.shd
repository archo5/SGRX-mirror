
#ifdef HLSL_D3D9

#define SHADOW_PASS_TO_RT 1
#define NEEDS_TEXTURE_2D( id ) sampler2D Tex##id : register(s##id);
#define NEEDS_TEXTURE_3D( id ) sampler3D Tex##id : register(s##id);
#define NEEDS_TEXTURE_CUBE( id ) samplerCUBE Tex##id : register(s##id);
#define NEEDS_TEXTURE_SM( id ) NEEDS_TEXTURE_2D( id )
#define TEXSAMPLE_2D( name, tc ) tex2D( name, tc )
#define TEXSAMPLE_2D_LOD( name, tc, lod ) tex2Dlod( name, float4(tc,0,lod) )
#define TEXSAMPLE_2D_BIAS( name, tc, bias ) tex2Dbias( name, float4(tc,0,bias) )
#define TEXSAMPLE_3D( name, tc ) tex3D( name, tc )
#define TEXSAMPLE_3D_LOD( name, tc, lod ) tex3Dlod( name, float4(tc,lod) )
#define TEXSAMPLE_CUBE_LOD( name, tc, lod ) texCUBElod( name, float4(tc,lod) )
#define ARG_OUT_RT0 ,out float4 RT0 : COLOR0
#define ARG_OUT_RT1 ,out float4 RT1 : COLOR1
#define ARG_OUT_RT2 ,out float4 RT2 : COLOR2
#define BLENDIDX_UINT8_4_TYPE int4
#define SEMANTIC_VSOUT_POS POSITION0
#define UNIFORM_BUFFER( name, pos )
#define UNIFORM_BUFFER_END
#define UNIFORM_VAR( decl, pos ) decl : register(c##pos)

float SHADOWMAP_2x2( sampler2D tex, float4 sizeinfo, float2 tc, float depth )
{
	float2 coord = tc * sizeinfo.xy;
	float2 fv = frac( coord );
	float coord0x = floor( coord.x ) * sizeinfo.z;
	float coord1x = ceil( coord.x ) * sizeinfo.z;
	float coord0y = floor( coord.y ) * sizeinfo.w;
	float coord1y = ceil( coord.y ) * sizeinfo.w;
	float s00 = step( depth, TEXSAMPLE_2D_LOD( tex, float2( coord0x, coord0y ), 0 ).r );
	float s10 = step( depth, TEXSAMPLE_2D_LOD( tex, float2( coord1x, coord0y ), 0 ).r );
	float s01 = step( depth, TEXSAMPLE_2D_LOD( tex, float2( coord0x, coord1y ), 0 ).r );
	float s11 = step( depth, TEXSAMPLE_2D_LOD( tex, float2( coord1x, coord1y ), 0 ).r );
	return lerp( lerp( s00, s10, fv.x ), lerp( s01, s11, fv.x ), fv.y );
}

#elif defined(HLSL_D3D11)

#define SHADOW_PASS_TO_RT 0
#define _NEEDS_SAMPLER( id ) SamplerState SMP_Tex##id : register(s##id);
#define NEEDS_TEXTURE_2D( id ) Texture2D Tex##id : register(t##id); _NEEDS_SAMPLER( id );
#define NEEDS_TEXTURE_3D( id ) Texture3D Tex##id : register(t##id); _NEEDS_SAMPLER( id );
#define NEEDS_TEXTURE_CUBE( id ) TextureCube Tex##id : register(t##id); _NEEDS_SAMPLER( id );
#define NEEDS_TEXTURE_SM( id ) Texture2D Tex##id : register(t##id); \
	SamplerComparisonState SMP_Tex##id : register(s##id);
#define TEXSAMPLE_2D( name, tc ) name.Sample( SMP_##name, tc )
#define TEXSAMPLE_2D_LOD( name, tc, lod ) name.SampleLevel( SMP_##name, tc, lod )
#define TEXSAMPLE_2D_BIAS( name, tc, bias ) name.SampleBias( SMP_##name, tc, bias )
#define TEXSAMPLE_3D( name, tc ) name.Sample( SMP_##name, tc )
#define TEXSAMPLE_3D_LOD( name, tc, lod ) name.SampleLevel( SMP_##name, tc, lod )
#define TEXSAMPLE_CUBE_LOD( name, tc, lod ) name.Sample( SMP_##name, float4(tc,lod) )
#define TEXSAMPLE_CUBE_BIAS( name, tc, bias ) name.SampleBias( SMP_##name, tc, bias )
#define ARG_OUT_RT0 ,out float4 RT0 : SV_TARGET0
#define ARG_OUT_RT1 ,out float4 RT1 : SV_TARGET1
#define ARG_OUT_RT2 ,out float4 RT2 : SV_TARGET2
#define BLENDIDX_UINT8_4_TYPE uint4
#define SEMANTIC_VSOUT_POS SV_POSITION0
#define UNIFORM_BUFFER( name, pos ) cbuffer name : register(b##pos){
#define UNIFORM_BUFFER_END };
#define UNIFORM_VAR( decl, pos ) decl

float SHADOWMAP_2x2_( Texture2D tex, SamplerComparisonState smp, float4 sizeinfo, float2 tc, float depth )
{
	return tex.SampleCmpLevelZero( smp, tc, depth );
}
#define SHADOWMAP_2x2( tex, sizeinfo, tc, depth ) SHADOWMAP_2x2_( tex, SMP_##tex, sizeinfo, tc, depth )

#endif
