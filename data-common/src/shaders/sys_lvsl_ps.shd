
sampler2D texDEPTH : register(s0);
sampler2D texCookie0 : register(s8);
sampler2D texShadow0 : register(s9);

float4x4 cMVPMtx : register(c0);
float3 cPos00 : register(c4);
float3 cPos10 : register(c5);
float3 cPos01 : register(c6);
float3 cPos11 : register(c7);
float3 cDir00 : register(c8);
float3 cDir10 : register(c9);
float3 cDir01 : register(c10);
float3 cDir11 : register(c11);
float4 DminDmaxRadPow : register(c12);
float3 lightPos : register(c13);
float3 lightColor : register(c14);
float4 shmsize : register(c15);
float4x4 shadowMtx : register(c16);

float hash( float n ) { return frac(sin(n)*753.5453123); }
float noise( float3 x )
{
    float3 p = floor(x);
    float3 f = frac(x);
    f = f*f*(3.0-2.0*f);
	
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return lerp(lerp(lerp( hash(n+  0.0), hash(n+  1.0),f.x),
                     lerp( hash(n+157.0), hash(n+158.0),f.x),f.y),
                lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                     lerp( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}

float4 main( float2 itex : TEXCOORD0, float2 fpos : TEXCOORD1 ) : COLOR0
{
	float3 q = float3(0,0,0);
	float qdt = 0.1; // TODO configure
	int iters = 16;
	
	float3 pos = lerp(
		lerp( cPos00, cPos10, itex.x ),
		lerp( cPos01, cPos11, itex.x ), itex.y );
	float3 dir = lerp(
		lerp( cDir00, cDir10, itex.x ),
		lerp( cDir01, cDir11, itex.x ), itex.y );
	float3 opos = pos;
	
	float dist = ( DminDmaxRadPow.y - DminDmaxRadPow.x );
	float dtdist = dist / iters;
	
	dir *= dtdist;
	qdt *= dtdist;
	
	pos += dir * (( noise( ( pos - dir ) * 5000 ) + noise( ( pos - dir ) * 2000 ) ) * 0.25 );
	
	float distance = tex2D( texDEPTH, itex ).r;
	
	for( int i = 0; i < iters; ++i )
	{
		if( length( float3( fpos, 1 ) * distance ) < length( opos - pos ) )
			break;
		
		float4 smpos = mul( shadowMtx, float4( pos, 1 ) );
		float3 nrmpos = smpos.xyz / smpos.w;
		float boundsfac =
			nrmpos.x > -1 && nrmpos.x < 1 &&
			nrmpos.y > -1 && nrmpos.y < 1 &&
			smpos.w > 0;
		float2 stex = nrmpos * float2(0.5,-0.5) + 0.5;
		
		float distfac = 1 - saturate( length( pos - lightPos ) / DminDmaxRadPow.z );
		distfac = pow( distfac, DminDmaxRadPow.w );
		float3 cookieRGB = tex2Dlod( texCookie0, float4( stex, 0, 0 ) ).rgb;
		
		float sh0 = nrmpos.z;
		float sh1 = nrmpos.z * 1.0001;
		float2 coord = stex * shmsize.xy;
		float2 fv = frac( coord );
		float coord0x = floor( coord.x ) * shmsize.z;
		float coord1x = ceil( coord.x ) * shmsize.z;
		float coord0y = floor( coord.y ) * shmsize.w;
		float coord1y = ceil( coord.y ) * shmsize.w;
		float s00 = smoothstep( sh0, sh1, tex2Dlod( texShadow0, float4( coord0x, coord0y, 0, 0 ) ).r );
		float s10 = smoothstep( sh0, sh1, tex2Dlod( texShadow0, float4( coord1x, coord0y, 0, 0 ) ).r );
		float s01 = smoothstep( sh0, sh1, tex2Dlod( texShadow0, float4( coord0x, coord1y, 0, 0 ) ).r );
		float s11 = smoothstep( sh0, sh1, tex2Dlod( texShadow0, float4( coord1x, coord1y, 0, 0 ) ).r );
		float shadowfac = lerp( lerp( s00, s10, fv.x ), lerp( s01, s11, fv.x ), fv.y );
		
		q += cookieRGB * ( qdt * distfac * shadowfac * boundsfac );
		
	//	pos += dir;
		pos += dir * (i/iters+0.5); // 1.5 to 0.5 jump depending on ?
	}
	
	return float4( lightColor * q, 1 );
}

