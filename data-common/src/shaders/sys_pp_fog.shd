#include "__eq"

NEEDS_TEXTURE_2D(0);
NEEDS_TEXTURE_CUBE(1);
#define texDEPTH Tex0
#define texSKY Tex1

UNIFORM_BUFFER( core_data, 0 )
	UNIFORM_VAR( float4x4 mInvView, 0 );
	UNIFORM_VAR( float3 cameraPos, 4 );
	UNIFORM_VAR( float4 fogRGBS, 5 );
	UNIFORM_VAR( float4 fogDATA, 6 );
	UNIFORM_VAR( float4 projDATA, 7 );
UNIFORM_BUFFER_END;

void main( float2 itex : TEXCOORD0
	ARG_OUT_RT0 )
{
	float2 fpos = lerp( projDATA.xy, projDATA.zw, itex );
	float fogColorSCALE = 1;//0.25;
	float fogMinDist = fogDATA.w;
	float fogHeightFactor = fogRGBS.w;
	float fogDensity = fogDATA.x;
	float fogHeightStart = fogDATA.z;
	float fogHeightDensity = fogDATA.y;
	float3 fogColor = fogRGBS.rgb * fogColorSCALE;
	
	float distance = TEXSAMPLE_2D( texDEPTH, itex ).r;
	
	float vdistance;
	float3 rayPos = cameraPos;
	float3 dir = mul( mInvView, float4( fpos, 1, 0 ) * distance ).xyz;
	float3 rayEnd = cameraPos + dir;
	float fogEntryZ = min( fogHeightStart, rayPos.z );
	if( rayEnd.z < fogEntryZ ) // ray going down
	{
		vdistance = fogEntryZ - rayEnd.z;
	}
	else // ray going up, possibly exiting fog halfspace
	{
		float fogExitZ = min( fogHeightStart, rayEnd.z );
		vdistance = max( 0, fogExitZ - fogEntryZ );
	}
	vdistance /= abs( rayEnd.z - rayPos.z );
	vdistance *= length( dir );
	
//	float totalFogDensity = fogDensity + max( 0, 1 - exp( -sqrt( vdistance ) * fogHeightDensity ) );
	float fogfactor = saturate( 1 - exp( -distance * fogDensity - pow( vdistance * fogHeightDensity, 2 ) ) );
	if( distance >= 1 )
	{
		float3 sbcoord = normalize( mul( mInvView, float4( fpos, 1, 0 ) ).xyz );
		float3 skycolor = TEXSAMPLE_CUBE_LOD( texSKY, sbcoord, 0 ).rgb * fogColorSCALE;
		fogColor = lerp( fogColor, skycolor, 1 /* TODO */ );
		fogfactor = 1;
	}
	RT0 = float4( fogColor, fogfactor );
}

