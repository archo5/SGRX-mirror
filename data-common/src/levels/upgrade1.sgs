
function unpack_vec3( v )
{
	x = v.x; y = v.y; z = v.z;
	return { x, y, z };
}

function ENT_UPG1_marker( pos, data )
{
	data.position = unpack_vec3( data.position );
	return "Marker", data;
}

function ENT_UPG1_player_start( pos, data )
{
	data =
	{
		name = "PLAYER_START",
		position = unpack_vec3( data.position ),
	};
	return "Marker", data;
}

function ENT_UPG1_m3sh( pos, data )
{
	data =
	{
		isStatic = true,
		visible = true,
		mesh = "meshes/" $ data.mesh $ ".ssm",
		position = unpack_vec3( data.position ),
		rotationXYZ = unpack_vec3( data.rot_angles ),
		scale = unpack_vec3( data.scale_uni * data.scale_sep ),
		lmQuality = data.lmquality,
		solid = data.solid,
		lightingMode = if( data.dynlit, LM_Dynamic, LM_Static ),
		castLMS = data.castlms,
	};
	return "Mesh", data;
}

function ENT_UPG1_mesharray( pos, data )
{
	data =
	{
		position = unpack_vec3( data.position ),
		rotationXYZ = unpack_vec3( data.rot_angles ),
		scale = unpack_vec3( data.scale_uni * data.scale_sep ),
		
		offset = data.offset,
		count = data.count,
		
		mesh = "meshes/" $ data.mesh $ ".ssm",
		solid = true,
		lightingMode = LM_Static,
		lmQuality = 1.0,
		castLMS = true,
	};
	return "MeshArray", data;
}

function ENT_UPG1_room( pos, data )
{
	data =
	{
		position = unpack_vec3( data.position ),
		rotationXYZ = unpack_vec3( data.rot_angles ),
		scale = unpack_vec3( data.scale_uni * data.scale_sep ),
		negative = data.negative,
		cellSize = data.cell_size,
	};
	return "AIRoom", data;
}

function ENT_UPG1_cover( pos, data )
{
	data =
	{
		position = unpack_vec3( data.position ),
		rotationXYZ = unpack_vec3( data.rot_angles ),
		scale = unpack_vec3( data.scale_uni * data.scale_sep ),
	};
	return "AICover", data;
}

function OBJ_UPG2( objdata )
{
	if( objdata.type == 2 )
	{
		if( objdata.entity_type == "Light" )
		{
			p = objdata.props;
			o = level.CreateGameObject().
			{
				name = p.name,
				id = p.id,
				position = vec3(p.position.x,p.position.y,p.position.z),
				rotationXYZ = vec3(p.rotationXYZ.x,p.rotationXYZ.y,p.rotationXYZ.z),
				scale = vec3(p.scale.x,p.scale.y,p.scale.z),
			};
			l = o.AddResource( "light", GO_RSRC_LIGHT ).
			{
				enabled = p.enabled,
				type = p.type,
				isStatic = p.isStatic,
				hasShadows = p.hasShadows,
				cookieTexture = p.cookieTexture,
				color = vec3(p.color.x,p.color.y,p.color.z),
				intensity = p.intensity,
				range = p.range,
				power = p.power,
				angle = p.angle,
				innerAngle = p.innerAngle,
				aspect = p.aspect,
				spotCurve = p.spotCurve,
				lightRadius = p.lightRadius,
			};
			return null;
		}
	}
	return objdata;
}
