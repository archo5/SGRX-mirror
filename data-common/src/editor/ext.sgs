
global ED_IMGUI = {};
global ED_ILOAD = {};
global ED_ISAVE = {};
global ED_ILCSV = class({}, ED_ISAVE);

function ED_ILOAD._Restart()
{
	this.links = [];
	this.objmap = {};
}
function ED_ILOAD._ResolveLinks()
{
	omap = this.objmap;
	foreach( link : this.links )
	{
		src = link.src;
		dst = @omap[ link.dst ];
		if( !dst )
			println( "failed to resolve dst: ", link.dst );
		if( src && dst )
		{
			src.(link.prop) = dst;
		}
	}
	this._Restart();
}
function ED_ILOAD.AddLink( src, prop, dst )
{
	this.links.push({ src, prop, dst });
}
function ED_ILCSV._Restart()
{
	this.links = [];
}

// link to loaded/saved object data
global ED_SDATA = null;

function ED_ILOAD.EditBool( lbl, obj, prop )
{
	obj.(prop) = tobool( ED_SDATA[ prop ] );
}
function ED_ISAVE.EditBool( lbl, obj, prop )
{
	ED_SDATA[ prop ] = tobool( obj.(prop) );
}
// default ED_ILCSV

function ED_ILOAD.EditInt( lbl, obj, prop, vmin, vmax )
{
	obj.(prop) = toint( ED_SDATA[ prop ] );
}
function ED_ISAVE.EditInt( lbl, obj, prop, vmin, vmax )
{
	ED_SDATA[ prop ] = toint( obj.(prop) );
}
// default ED_ILCSV

function ED_ILOAD.EditFloat( lbl, obj, prop, vmin, vmax, prec )
{
	obj.(prop) = toreal( ED_SDATA[ prop ] );
}
function ED_ISAVE.EditFloat( lbl, obj, prop, vmin, vmax, prec )
{
	ED_SDATA[ prop ] = toreal( obj.(prop) );
}
// default ED_ILCSV

function ED_ILOAD.EditVec3( lbl, obj, prop, vmin, vmax, prec )
{
	d = ED_SDATA[ prop ];
	if( typeof(d) === "vec3" )
		obj.(prop) = d;
	else
		obj.(prop) = vec3( d.x, d.y, d.z );
}
function ED_ISAVE.EditVec3( lbl, obj, prop, vmin, vmax, prec )
{
	v = obj.(prop);
	ED_SDATA[ prop ] = vec3( v ) ?? vec3(0);
}
function ED_ILCSV.EditVec3( lbl, obj, prop, vmin, vmax, prec )
{
	ED_SDATA[ prop ] = vec3( obj.(prop) );
}

function ED_ILOAD.EditFlag( lbl, obj, prop, flag )
{
	obj.(prop) = toint( ED_SDATA[ prop ] );
}
function ED_ISAVE.EditFlag( lbl, obj, prop, flag )
{
	ED_SDATA[ prop ] = toint( obj.(prop) );
}
// default ED_ILCSV

function ED_ILOAD.EditMask( lbl, obj, prop, count )
{
	if( @ED_SDATA[ prop ] !== null )
		obj.(prop) = toint( ED_SDATA[ prop ] );
}
function ED_ISAVE.EditMask( lbl, obj, prop, count )
{
	ED_SDATA[ prop ] = toint( obj.(prop) );
}
// default ED_ILCSV

function ED_ILOAD.EditColorRGBLDR( lbl, obj, prop )
{
	d = ED_SDATA[ prop ];
	if( typeof(d) === "vec3" )
		obj.(prop) = d;
	else
		obj.(prop) = vec3( d.x, d.y, d.z );
}
function ED_ISAVE.EditColorRGBLDR( lbl, obj, prop )
{
	v = obj.(prop);
	ED_SDATA[ prop ] = vec3( v );
}
function ED_ILCSV.EditColorRGBLDR( lbl, obj, prop )
{
	ED_SDATA[ prop ] = vec3( obj.(prop) );
}

function ED_ILOAD.EditXFMat4( lbl, obj, prop )
{
	a = ED_SDATA[ prop ];
	m = mat4();
	if( typeof(a) === "mat4" )
		m = a;
	else if( a != null )
	{
		for( i = 0; i < 16; ++i )
			m[ i ] = a[ i ];
	}
	obj.(prop) = m;
}
function ED_ISAVE.EditXFMat4( lbl, obj, prop )
{
	m = obj.(prop);
	ED_SDATA[ prop ] = mat4( m );
}
function ED_ILCSV.EditXFMat4( lbl, obj, prop )
{
	ED_SDATA[ prop ] = mat4( obj.(prop) );
}

function ED_ILOAD.EditString( lbl, obj, prop, maxlen ){ obj.(prop) = tostring( ED_SDATA[ prop ] ?? "" ); }
function ED_ISAVE.EditString( lbl, obj, prop, maxlen ){ ED_SDATA[ prop ] = tostring( obj.(prop) ?? "" ); }
// default ED_ILCSV

function ED_ILOAD.PickMesh( lbl, obj, prop, caption ){ obj.(prop) = tostring( ED_SDATA[ prop ] ?? "" ); }
function ED_ISAVE.PickMesh( lbl, obj, prop, caption ){ ED_SDATA[ prop ] = tostring( obj.(prop) ?? "" ); }
// default ED_ILCSV

function ED_ILOAD.PickTexture( lbl, obj, prop, caption ){ obj.(prop) = tostring( ED_SDATA[ prop ] ?? "" ); }
function ED_ISAVE.PickTexture( lbl, obj, prop, caption ){ ED_SDATA[ prop ] = tostring( obj.(prop) ?? "" ); }
// default ED_ILCSV

function ED_ILOAD.PickPartSys( lbl, obj, prop, caption ){ obj.(prop) = tostring( ED_SDATA[ prop ] ?? "" ); }
function ED_ISAVE.PickPartSys( lbl, obj, prop, caption ){ ED_SDATA[ prop ] = tostring( obj.(prop) ?? "" ); }
// default ED_ILCSV

function ED_ILOAD.PickSound( lbl, obj, prop, caption ){ obj.(prop) = tostring( ED_SDATA[ prop ] ?? "" ); }
function ED_ISAVE.PickSound( lbl, obj, prop, caption ){ ED_SDATA[ prop ] = tostring( obj.(prop) ?? "" ); }
// default ED_ILCSV

function ED_ILOAD.PickLocalRsrc( lbl, obj, prop, gobj )
{
	obj.(prop) = null;
	this.links.push({ src = obj, prop, dst = tostring( ED_SDATA[ prop ] ?? "" ) });
}
function ED_ISAVE.PickLocalRsrc( lbl, obj, prop, gobj )
{
	ED_SDATA[ prop ] = tostring( @obj.(prop).__guid ?? "" );
}
function ED_ILCSV.PickLocalRsrc( lbl, obj, prop, gobj )
{
	ED_SDATA[ prop ] = null;
	this.links.push({
		src = tostring( @obj.__guid ?? "" ),
		prop,
		dst = tostring( @obj.(prop).__guid ?? "" )
	});
}

function ED_ILOAD.ComboNT( lbl, obj, prop, zssl, start )
{
	obj.(prop) = toint( ED_SDATA[ prop ] );
}
function ED_ISAVE.ComboNT( lbl, obj, prop, zssl, start )
{
	ED_SDATA[ prop ] = toint( obj.(prop) );
}
// default ED_ILCSV

function ED_ILOAD.Button( lbl ){}
function ED_ISAVE.Button( lbl ){}
// default ED_ILCSV

