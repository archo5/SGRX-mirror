
function min(a,b){ return if(a<b,a,b); }
function max(a,b){ return if(a>b,a,b); }
function clamp(v,min,max){ return if(v<min,min,if(v>max,max,v)); }

_G.
{
	tex_background = TEXTURE("ui/bg1.png"),
	tex_button_core_n = TEXTURE("ui/button_core.png"),
	tex_button_core_h = TEXTURE("ui/button_core_h.png"),
	tex_button_core_c = TEXTURE("ui/button_core_c.png"),
	tex_button_core_f = TEXTURE("ui/button_core_f.png"),
	values = {},
	ev_change = {},
};

function CallEvents( evcb, key )
{
	if( evcb === null );
	else if( is_callable( evcb ) )
		evcb( key );
	else
	{
		foreach( ev : evcb )
			ev( key );
	}
}

function CallEventChain( events, key )
{
	origkey = key;
	for(;;)
	{
		CallEvents( @events[ key ], origkey );
		pos = string_find_rev( key, "/" );
		if( pos === null )
			break;
		key = string_part( key, 0, pos );
	}
}

function ButtonShader( ctrl )
{
	tex = if( ctrl.clickedL, tex_button_core_c,
		if( ctrl.hover, tex_button_core_h, tex_button_core_n ) );
	ctrl.DTex( tex );
	ctrl.DButton( 0, 0, ctrl.width, ctrl.height, 4, 4/128 );
	ctrl.DFont( "core", ctrl.height / 2 );
	ctrl.DText( ctrl.text, ctrl.width / 2,
		ctrl.height / 2 + ctrl.InvIS( ctrl.clickedL ),
		HALIGN_CENTER, VALIGN_CENTER );
	if( ctrl.focused )
	{
		ctrl.DTex( tex_button_core_f );
		ctrl.DButton( 0, 0, ctrl.width, ctrl.height, 4, 4/128 );
	}
}

function CreateButton( x, y, w, h, text )
{
	ctrl = this.CreateControl( x, y, w, h );
	ocb = ctrl.eventCallback;
	Button = ctrl;
	function Button.eventCallback( ev ) use( ocb )
	{
		if( ev.type == GUI_Event_BtnActivate )
		{
			if( ev.button == GUI_MB_Left )
				this.InvokeCallbacks( "onclick" );
			return 1;
		}
		return this!ocb( ev );
	}
	ctrl.shaders.push( ButtonShader );
	ctrl.text = text;
	ctrl.focusable = true;
	return ctrl;
}

function CreateSwitchButton( x, y, w, h, sbw, options, key )
{
	ctrl = this.CreateControl( x, y, w, h );
	
	btn_mid = ctrl!CreateButton( sbw, 0, w - sbw * 2, h );
	btn_lft = null;
	btn_rgt = null;
	if( sbw > 0 )
	{
		btn_lft = ctrl!CreateButton( 0, 0, sbw, h, "<" );
		btn_rgt = ctrl!CreateButton( w - sbw, 0, sbw, h, ">" );
	}
	
	ocb = ctrl.eventCallback;
	SwitchButton = ctrl;
	function SwitchButton.eventCallback( ev ) use( ocb )
	{
		if( ev.isActivate )
		{
			btn = if( ev.type == GUI_Event_KeyActivate, 0, ev.button );
			if( ev.target == this.btn_mid )
			{
				if( btn == GUI_MB_Left ) this.pos++;
				if( btn == GUI_MB_Right ) this.pos--;
			}
			else if( ev.target == this.btn_lft && ( btn == GUI_MB_Left ) ) this.pos--;
			else if( ev.target == this.btn_rgt && ( btn == GUI_MB_Left ) ) this.pos++;
			
			this.pos = toint( ( this.pos + this.options.size ) % this.options.size );
			this.OnChangedPos();
		}
		return this!ocb( ev );
	}
	function SwitchButton.Reload()
	{
		val = @values[ this.key ];
		this.pos = toint( val );
		if( typeof( @this.options.first ) != "string" )
		{
			for( i = 0; i < this.options.size; ++i )
				if( this.options[ i ].value == val )
					break;
			this.pos = toint( i % this.options.size );
		}
		this.OnChangedPos();
	}
	function SwitchButton.OnChangedPos()
	{
		opt = this.options[ this.pos ];
		if( typeof(opt) == "string" )
		{
			this.btn_mid.text = opt;
			values[ this.key ] = this.pos;
		}
		else
		{
			this.btn_mid.text = opt.name;
			values[ this.key ] = opt.value;
		}
		CallEventChain( ev_change, this.key );
	}
	
	ctrl.{ btn_mid, btn_lft, btn_rgt, options, key };
	ctrl.Reload();
	
	return ctrl;
}

function SliderShader( ctrl )
{
	ctrl.DCol( 0, 1 );
	ctrl.DTex( tex_button_core_c );
	ctrl.DButton( 0, 0, ctrl.width, ctrl.height, 4, 4/128 );
	pos = ctrl.pos;
	ctrl.DCol( 1 );
	if( ctrl.btnwidth > 0 )
	{
		xoff = ( ctrl.width - ctrl.btnwidth ) * pos;
		ctrl.DButton( xoff, 0, xoff + ctrl.btnwidth, ctrl.height,
			min( 4, ctrl.IS( ctrl.btnwidth / 2 ) ), 4/128 );
	}
	else
	{
		ctrl.DButton( 0, 0, ctrl.width * pos, ctrl.height,
			min( 4, ctrl.IS( ctrl.width * pos / 2 ) ), 4/128 );
	}
	
	text = ctrl.val;
	if( ctrl.textfunc )
		text = ctrl.textfunc( text );
	ctrl.DCol( 0.9, 1 );
	ctrl.DFont( "core", ctrl.height / 2 );
	ctrl.DText( text, ctrl.width / 2, ctrl.height / 2, HALIGN_CENTER, VALIGN_CENTER );
}

function CreateSlider( x, y, w, h, btnwidth, key, mapping, textfunc )
{
	ctrl = this.CreateControl( x, y, w, h );
	
	ocb = ctrl.eventCallback;
	Slider = ctrl;
	ctrl.shaders.push( SliderShader );
	function Slider.eventCallback( ev ) use( ocb )
	{
		if( ( ev.type == GUI_Event_MouseMove && this.clickedL ) ||
			( ev.type == GUI_Event_BtnDown && ev.button == GUI_MB_Left ) )
		{
			bws = this.IS( this.btnwidth / 2 );
			pmin = this.rx0 + bws;
			pmax = this.rx1 - bws;
			this.SetPos( ( ev.x - pmin ) / ( pmax - pmin ) );
		}
		return this!ocb( ev );
	}
	function Slider.MapTo( pos )
	{
		map = this.mapping;
		if( typeof(map) == "int" )
			return round( pos * map );
		else if( typeof(map) == "real" )
			return pos * map;
		else
			return this!map( pos, true );
	}
	function Slider.MapFrom( val )
	{
		map = this.mapping;
		if( typeof(map) == "int" || typeof(map) == "real" )
			pos = toreal( val ) / map;
		else
			pos = this!map( val, false );
		return clamp( pos, 0.0, 1.0 );
	}
	function Slider.Reload()
	{
		this.pos = this.MapFrom( @values[ this.key ] );
		this.val = this.MapTo( this.pos );
	}
	function Slider.SetPos( pos )
	{
		oldval = this.val;
		pos = clamp( pos, 0.0, 1.0 );
		val = this.MapTo( pos );
		values[ this.key ] = val;
		this.pos = this.MapFrom( val );
		this.val = val;
		if( oldval != val )
			CallEventChain( ev_change, this.key );
	}
	
	ctrl.{ btnwidth, key, mapping, textfunc };
	ctrl.Reload();
	
	return ctrl;
}

function YesNoQuestion( text )
{
	answer = null;
	factor = 0.0;
	
	scr_overlay = ROOT.CreateScreen( GUI_ScrMode_Crop, 100, 100 ).{ z = 1000 };
	scr_overlay.shaders.push(function( ctrl )
	{
		ctrl.DCol( 0, 0.5 );
		ctrl.DQuad( 0, 0, ctrl.width, ctrl.height );
	});
	scr_bgr = ROOT.CreateScreen( GUI_ScrMode_Fit, 200, 100 ).{
		z = 1001, xscale = 0.4, yscale = 0.4, text = text };
	scr_bgr.shaders.push(function( ctrl ) use( factor )
	{
		// background
		ctrl.DCol( 0.1, 0.3, 0.7, 0.5 );
		ctrl.DQuad( 0, 0, 200, 100 );
		// top border
		ctrl.DCol( 0.7, 1 );
		ctrl.DQuad( 0, 0, 200 * factor, 20 );
		ctrl.DCol( 0.8, 1 );
		ctrl.DQuad( 0, 20, 200 * factor, 21 );
		ctrl.DCol( 0.0, 0.2 );
		ctrl.DQuad( 0, 21, 200 * factor, 24 );
		// question text
		ctrl.DCol( 0.02, 1 * factor );
		ctrl.DFont( "core", 10 );
		ctrl.DText( ctrl.text, 5, 10, HALIGN_LEFT, VALIGN_CENTER );
	});
	
	btn_yes = scr_bgr!CreateButton( 10, 70, 60, 20, "Yes" );
	btn_yes.AddCallback( "onclick", function() use(answer){ answer = true; } );
	btn_no = scr_bgr!CreateButton( 200-70, 70, 60, 20, "No" );
	btn_no.AddCallback( "onclick", function() use(answer){ answer = false; } );
	
	SetFocusRoot( scr_bgr );
	
	while( factor < 1 )
	{
		factor = min( factor + 0.05, 1 );
		yield 0.01;
	}
	
	while( answer === null )
	{
		yield;
	}
	
	return answer;
}

global scr_background = ROOT.CreateScreen( GUI_ScrMode_Crop, 512, 512 ).{ z = -1 };
t = 0;
scr_background.shaders.push(function( ctrl, dt ) use( t )
{
	t += dt;
	ctrl.DTex( tex_background );
	ctrl.DQuadExt( 0, 0, 512, 512, t * -0.02 );
	process_threads();
});

global scr_mainmenu = ROOT.CreateScreen( GUI_ScrMode_Fit, 105, 100 );
scr_mainmenu.shaders.push(function( ctrl )
{
	ctrl.DCol( 0.5, 0.5 );
	ctrl.DQuad( 5, 5, ctrl.width - 5, ctrl.height - 5 );
});

global scr_button1 = scr_mainmenu!CreateButton( 10, 10, 40, 5, "Click me" );
scr_button1.AddCallback( "onclick", function()
{
	println( "clicked!" );
	thread YesNoQuestion( "Do you want to do something?" );
});

global scr_button2 = scr_mainmenu!CreateButton( 10, 20, 40, 5, "Click me 2" );
scr_button2.AddCallback( "onclick", function()
{
	println( "clicked 2!" );
	thread YesNoQuestion( "Do you want to do something?" );
});

global scr_switch1 = scr_mainmenu!CreateSwitchButton(
	10, 30, 40, 5, 5, ["One", "Two", "Three"], "all/systems/test" );
ev_change."all/systems/test" = function(k){ println("\\ all ("$values[k]$")"); };
ev_change."all/systems" = function(k){ println("\\ systems ("$values[k]$")"); };
ev_change."all" = function(k){ println("\\ test ("$values[k]$")"); };

function proctf( val ){ return round( val ) $ "%"; }
global scr_slide1a = scr_mainmenu!CreateSlider( 10, 40, 40, 5, 0, "all/sld1a", 10 );
global scr_slide1b = scr_mainmenu!CreateSlider( 55, 40, 40, 5, 4, "all/sld1b", 10 );
global scr_slide2a = scr_mainmenu!CreateSlider( 10, 50, 40, 5, 0, "all/sld2a", 100.0, proctf );
global scr_slide2b = scr_mainmenu!CreateSlider( 55, 50, 40, 5, 4, "all/sld2b", 100.0, proctf );

