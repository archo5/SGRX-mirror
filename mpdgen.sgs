
include "fmt", "string";

global structs = {};

function is_boxable_type( t )
{
	info = @GET_TYPE( t );
	if( info === null )
	{
		ERROR( "cannot determine boxability of type '" $ t $ "', it must be specified manually" );
	}
	return info.typeval == "mpdt_Struct";
}

function STRUCT( name, info )
{
	if( isset( structs, name ) )
	{
		ERROR( "type '" $ name $ "' is already defined" );
	}
	info.{ name };
	if( @info.typeval === null )
		info.typeval = "mpdt_Struct";
	if( info.typeval == "mpdt_Struct" || info.typeval == "mpdt_Pointer" || info.typeval == "mpdt_Enum" )
	{
		info.typestruct = name $ "_MPD::inst()";
	}
	else
	{
		info.typestruct = "0";
	}
	if( @info.props === null )
		info.props = [];
	else
	{
		foreach( prop : info.props )
		{
			prop.flags = "";
			if( @prop.ref === null )
				prop.ref = "_OBJ_->" $ prop.name;
			
			if( prop.type )
			{
				if( @prop.get === null )
					prop.get = prop.ref;
				else
					prop.flags |= " | MPD_PROP_HAS_GETTER";
			}
			else prop.get = false;
			
			if( @prop.set === null )
			{
				if( prop.type )
					prop.set = prop.ref $ " = mpd_var_get<_TYPE_ >(_VAR_)";
				else
					prop.set = false;
			}
			else
				prop.flags |= " | MPD_PROP_HAS_SETTER";
			
			if( @prop.box === null )
				prop.box = prop.get != prop.ref && is_boxable_type( prop.type );
			if( prop.box )
				prop.flags |= " | MPD_PROP_BOXED_GETTER";
			
			prop.flags = string_part( prop.flags, 3 );
			if( !prop.flags )
				prop.flags = "0";
		}
	}
	index = @info.index;
	if( index )
	{
		if( @index.subtype === null )
			ERROR( name $ "|index: subtype unspecified" );
		if( @index.type === null )
			index.type = "int32_t";
		if( @index.ref === null )
			index.ref = "(*(_OBJ_))[mpd_var_get<" $ index.type $ " >(_INDEX_)]";
		if( @index.get === null )
			index.get = index.ref;
		if( @index.set === null )
			index.set = index.ref $ " = mpd_var_get<_SUBTYPE_ >(_VAR_)";
	}
	if( @info.values === null )
		info.values = {};
	else
	{
		foreach( key, value : info.values )
		{
			if( typeof(value) != "dict" )
			{
				info.values[ key ] = { value = value };
			}
		}
	}
	if( @info.methods === null )
		info.methods = {};
	if( !@info.nativetype )
		info.nativetype = info.name;
	if( !@info.all_natives )
		info.all_natives = [];
	info.all_natives.push( info.nativetype );
	structs[ name ] = info;
}

function POINTER( name, subtype, all_natives )
{
	STRUCT( name, { typeval = "mpdt_Pointer", subtype, nativetype = subtype $ "*", all_natives } );
}

function ENUM( name, values )
{
	STRUCT( name, get_merged( values, { typeval = "mpdt_Enum" } ) );
}

function DEFINE_BASETYPE( name, typeval )
{
	STRUCT( name, { typeval } );
}

function GET_TYPE( name )
{
	if( name === null )
	{
		return { typeval = "mpdt_None", nativetype = "NULL_TYPE_USED", name = null };
	}
	t = @structs[ name ];
	if( t === null )
	{
		ERROR( "type '" $ name $ "' was not found" );
	}
	return t;
}

DEFINE_BASETYPE( "mpd_StringView", "mpdt_ConstString" );
DEFINE_BASETYPE( "bool", "mpdt_Bool" );
DEFINE_BASETYPE( "int8_t", "mpdt_Int8" );
DEFINE_BASETYPE( "int16_t", "mpdt_Int16" );
DEFINE_BASETYPE( "int32_t", "mpdt_Int32" );
DEFINE_BASETYPE( "int64_t", "mpdt_Int64" );
DEFINE_BASETYPE( "uint8_t", "mpdt_UInt8" );
DEFINE_BASETYPE( "uint16_t", "mpdt_UInt16" );
DEFINE_BASETYPE( "uint32_t", "mpdt_UInt32" );
DEFINE_BASETYPE( "uint64_t", "mpdt_UInt64" );
DEFINE_BASETYPE( "float", "mpdt_Float32" );
DEFINE_BASETYPE( "double", "mpdt_Float64" );

eval_file( argv[1] );



function CEsc( s )
{
	// escape all unprintable characters and quote (") as ""\xHH""
	return '"' $ fmt_custom_encode( s, "^ !#-~", '""\\x', 4, 2, '""' ) $ '"';
}

function TypeInfoPart( t )
{
	if( t === null )
		return "mpd_TypeInfo_NONE_INIT";
	info = GET_TYPE( t );
	return "{ " $ CEsc( t ) $ ", " $ info.typeval $ ", " $ info.typestruct $ " }";
}


// header
print '\n';
print '#pragma once\n';
print '#ifndef MPD_API_HPP\n';
print '#  define MPD_API_HPP "mpd_api.hpp"\n';
print '#endif\n';
print '#include MPD_API_HPP\n\n';

// metadata
foreach( struct : structs )
{
	if( struct.typeval != "mpdt_Struct" &&
		struct.typeval != "mpdt_Enum" &&
		struct.typeval != "mpdt_Pointer" )
		continue;
	
	// metadata struct
	print "struct ", struct.name, "_MPD : struct_MPD<", struct.name, "_MPD, ", struct.nativetype, " >\n{\n";
	
	// property enum
	if( struct.props )
	{
		print "\tenum PIDS\n";
		print "\t{\n";
		foreach( prop : struct.props )
		{
			print "\t\tPID_", prop.name, ",\n";
		}
		print "\t};\n";
		print "\n";
	}
	
	// core
	print '\tstatic const char* name(){ return "', struct.name, '"; }\n';
	print "\tstatic const ", struct.name, "_MPD* inst(){ static const ", struct.name, "_MPD mpd; return &mpd; }\n";
	print "\tstatic const mpd_KeyValue* metadata();\n";
	print "\n";
	
	// properties
	print "\tstatic int propcount(){ return ", struct.props.size, "; }\n";
	print "\tstatic const mpd_PropInfo* props();\n";
	print "\tstatic mpd_Variant getprop( ", struct.nativetype, " const*, int );\n";
	print "\tstatic bool setprop( ", struct.nativetype, "*, int, const mpd_Variant& );\n";
	print "\n";
	
	// index
	if( @struct.index )
	{
		print "\tstatic const mpd_TypeInfo* indextypes(){ static const mpd_TypeInfo types[] = { ", TypeInfoPart( struct.index.type ), ", ", TypeInfoPart( struct.index.subtype ), " }; return types; }\n";
	}
	else
	{
		print "\tstatic const mpd_TypeInfo* indextypes(){ return 0; }\n";
	}
	print "\tstatic mpd_Variant getindex( ", struct.nativetype, " const*, const mpd_Variant& );\n";
	print "\tstatic bool setindex( ", struct.nativetype, "*, const mpd_Variant&, const mpd_Variant& );\n";
	print "\n";
	
	// values
	print "\tstatic int valuecount(){ return ", dict_size( struct.values ), "; }\n";
	print "\tstatic const mpd_EnumValue* values();\n";
	print "\n";
	
	// methods
	print "\tstatic int methodcount(){ return ", dict_size( struct.methods ), "; }\n";
	print "\tstatic const mpd_MethodInfo* methods();\n";
	print "\tstatic void methodcall( ", struct.nativetype, "*, int, const mpd_Variant*, int );\n";
	print "\n";
	
	// dump
	print "\tstatic void dump( MPD_STATICDUMP_ARGS(", struct.nativetype, ") );\n";
	if( struct.values )
	{
		print "\tstatic void dump_enumval( MPD_STATICDUMP_ARGS(int64_t) ){ ", struct.nativetype, " v = (", struct.nativetype, ") *pdata; dump( &v, limit, level ); }\n";
	}
	
	print "};\n\n";
	
	// external dumping function
	print "MPD_DUMPDATA_WRAPPER(", struct.name, ", ", struct.nativetype, ");\n";
	
	// data retrieval from variant
	if( struct.values )
	{
		print "template<> inline ", struct.nativetype, " mpd_var_get<", struct.nativetype, " >( const mpd_Variant& v ){ return (", struct.nativetype, ") v.get_enum(); }\n";
	}
	
	// type resolution
	foreach( nt : struct.all_natives )
	{
		print "template<> struct mpd_MetaType<", nt, " > : ", struct.name, "_MPD {};\n";
		print "template<> struct mpd_MetaType<", nt, " const> : ", struct.name, "_MPD {};\n";
	}
	print "template<> struct mpd_MetaType<", struct.name, "_MPD> : ", struct.name, "_MPD {};\n\n";
}
print "\n";



// function implementations:
// - to avoid "specialization after instantiation" errors
// - to allow recursive referencing

function print_metadata( varname, srcdict )
{
	if( srcdict )
	{
		print "\tstatic const mpd_KeyValue ", varname, "[] =\n";
		print "\t{\n";
		foreach( key, val : srcdict )
		{
			key = tostring( key );
			sval = tostring( val );
			print "\t\t{ ", CEsc( key ), ", ", key.length, ", ", CEsc( sval ), ", ", sval.length, ", ", toint( val ), ", (float) ", toreal( val ), " },\n";
		}
		print "\t\tmpd_KeyValue_NONE_INIT\n";
		print "\t};\n";
	}
	else
	{
		print "\tstatic const mpd_KeyValue ", varname, "[] = { mpd_KeyValue_NONE_INIT };\n";
	}
}

print "#ifdef MPD_IMPL\n";
foreach( struct : structs )
{
	if( struct.typeval != "mpdt_Struct" &&
		struct.typeval != "mpdt_Enum" &&
		struct.typeval != "mpdt_Pointer" )
		continue;
	
	// TYPE METADATA
	if( !@struct.metadata )
	{
		print "const mpd_KeyValue* ", struct.name, "_MPD::metadata(){ return mpd_KeyValue::none(); }\n";
	}
	else
	{
		print "const mpd_KeyValue* ", struct.name, "_MPD::metadata()\n";
		print "{\n";
		print_metadata( "data", struct.metadata );
		print "\treturn data;\n";
		print "}\n";
	}
	
	// PROPERTY INFO & INTERFACE
	if( struct.props.size == 0 )
	{
		print "const mpd_PropInfo* ", struct.name, "_MPD::props(){ return mpd_PropInfo::none(); }\n";
		print "mpd_Variant ", struct.name, "_MPD::getprop( ", struct.nativetype, " const*, int ){ return mpd_Variant(); }\n";
		print "bool ", struct.name, "_MPD::setprop( ", struct.nativetype, "*, int, const mpd_Variant& ){ return false; }\n";
	}
	else
	{
		// PROPERTIES
		print "const mpd_PropInfo* ", struct.name, "_MPD::props()\n";
		print "{\n";
		foreach( prop : struct.props )
		{
			print_metadata( prop.name $ "_metadata", @prop.metadata );
		}
		print "\tstatic const mpd_PropInfo data[] =\n";
		print "\t{\n";
		foreach( prop : struct.props )
		{
			print "\t\t{ ", CEsc( prop.name ), ", ", prop.name.length, ", ", TypeInfoPart( prop.type ), ", ", prop.flags, ", ", prop.name, "_metadata },\n";
		}
		print "\t\tmpd_PropInfo_NONE_INIT\n";
		print "\t};\n";
		print "\treturn data;\n";
		print "}\n";
		
		// GETPROP
		print "mpd_Variant ", struct.name, "_MPD::getprop( ", struct.nativetype, " const* obj, int p )\n";
		print "{\n";
		print "\t(void) obj;\n";
		print "\tswitch( p )\n";
		print "\t{\n";
		foreach( i, prop : struct.props )
		{
			if( prop.get === false )
			{
				print "\tcase ", i, ": return mpd_Variant();\n";
			}
			else
			{
				pntype = GET_TYPE( prop.type ).nativetype;
				prop_get = string_translate( prop.get, { _OBJ_ = "obj", _TYPE_ = pntype } );
				if( GET_TYPE( prop.type ).typeval == "mpdt_Enum" )
				{
					print "\tcase ", i, ": return mpd_Variant( (", pntype, ") ", prop_get, ", mpd_Variant::Enum );\n";
				}
				else if( prop.box )
				{
					print "\tcase ", i, ": return mpd_Variant( (", pntype, " const&) ", prop_get, ", mpd_Variant::Box );\n";
				}
				else
				{
					print "\tcase ", i, ": return (", pntype, " const&) ", prop_get, ";\n";
				}
			}
		}
		print "\tdefault: return mpd_Variant();\n";
		print "\t}\n";
		print "}\n";
		
		// SETPROP
		print "bool ", struct.name, "_MPD::setprop( ", struct.nativetype, "* obj, int p, const mpd_Variant& val )\n";
		print "{\n";
		print "\t(void) obj;\n";
		print "\t(void) val;\n";
		print "\tswitch( p )\n";
		print "\t{\n";
		foreach( i, prop : struct.props )
		{
			if( prop.set === false )
			{
				print "\tcase ", i, ": return false;\n";
			}
			else
			{
				pntype = GET_TYPE( prop.type ).nativetype;
				prop_set = string_translate( prop.set, { _OBJ_ = "obj", _VAR_ = "val", _TYPE_ = pntype } );
				print "\tcase ", i, ": ", prop_set, ";";
				if( @prop.after_set )
					print " ", prop.after_set, ";";
				print " return true;\n";
			}
		}
		print "\tdefault: return false;\n";
		print "\t}\n";
		print "}\n";
	}
	
	// INDEXING
	if( @struct.index === null )
	{
		print "mpd_Variant ", struct.name, "_MPD::getindex( ", struct.nativetype, " const*, const mpd_Variant& ){ return mpd_Variant(); }\n";
		print "bool ", struct.name, "_MPD::setindex( ", struct.nativetype, "*, const mpd_Variant&, const mpd_Variant& ){ return false; }\n";
	}
	else
	{
		idx = struct.index;
		// GETINDEX
		print "mpd_Variant ", struct.name, "_MPD::getindex( ", struct.nativetype, " const* obj, const mpd_Variant& key )\n";
		print "{\n";
		insubtype = GET_TYPE( idx.subtype ).nativetype;
		index_get = string_translate( idx.get, { _OBJ_ = "obj", _INDEX_ = "key", _SUBTYPE_ = insubtype } );
		print "\treturn (", insubtype, " const&)", index_get, ";\n";
		print "}\n";
		
		// SETINDEX
		print "bool ", struct.name, "_MPD::setindex( ", struct.nativetype, "* obj, const mpd_Variant& key, const mpd_Variant& val )\n";
		print "{\n";
		insubtype = GET_TYPE( idx.subtype ).nativetype;
		index_set = string_translate( idx.set, { _OBJ_ = "obj", _INDEX_ = "key", _VAR_ = "val", _SUBTYPE_ = insubtype } );
		print "\t", index_set, ";\n";
		print "\treturn true;\n";
		print "}\n";
	}
	
	// ENUM VALUES
	if( dict_size( struct.values ) == 0 )
	{
		print "const mpd_EnumValue* ", struct.name, "_MPD::values(){ return mpd_EnumValue::none(); }\n";
	}
	else
	{
		print "const mpd_EnumValue* ", struct.name, "_MPD::values()\n";
		print "{\n";
		foreach( key, info : struct.values )
		{
			print_metadata( key $ "_metadata", @info.metadata );
		}
		print "\tstatic const mpd_EnumValue data[] =\n";
		print "\t{\n";
		eprefix = "";
		if( nt = @struct.nativetype )
		{
			pos = string_find_rev( nt, "::" );
			if( pos !== null )
				eprefix = string_part( nt, 0, pos + 2 );
		}
		foreach( key, info : struct.values )
		{
			value = tostring(@info.value);
			if( value == ENUM )
				value = eprefix $ key;
			print "\t\t{ ", CEsc( key ), ", ", key.length, ", ", value, ", ", key, "_metadata },\n";
		}
		print "\t\tmpd_EnumValue_NONE_INIT\n";
		print "\t};\n";
		print "\treturn data;\n";
		print "}\n";
	}
	
	// METHODS
	if( dict_size( struct.methods ) == 0 )
	{
		print "const mpd_MethodInfo* ", struct.name, "_MPD::methods(){ return mpd_MethodInfo::none(); }\n";
		print "void ", struct.name, "_MPD::methodcall( ", struct.nativetype, "*, int, const mpd_Variant*, int ){}\n";
	}
	else
	{
		print "const mpd_MethodInfo* ", struct.name, "_MPD::methods()\n";
		print "{\n";
		foreach( name, method : struct.methods )
		{
			print_metadata( name $ "_metadata", @method.metadata );
			print "\tstatic const mpd_TypeInfo ", name, "_params[] =\n";
			print "\t{\n";
			foreach( type : method.params )
			{
				print "\t\t", TypeInfoPart( type ), ",\n";
			}
			print "\t\tmpd_TypeInfo_NONE_INIT\n";
			print "\t};\n";
		}
		print "\tstatic const mpd_MethodInfo data[] =\n";
		print "\t{\n";
		foreach( name, method : struct.methods )
		{
			print "\t\t{ ", CEsc( name ), ", ", name.length, ", ", name, "_params, ", method.params.size, ", ", name, "_metadata },\n";
		}
		print "\t\tmpd_MethodInfo_NONE_INIT,\n";
		print "\t};\n";
		print "\treturn data;\n";
		print "}\n";
		print "void ", struct.name, "_MPD::methodcall( ", struct.nativetype, "* obj, int id, const mpd_Variant* args, int argcount )\n";
		print "{\n";
		print "\tswitch( id )\n";
		print "\t{\n";
		i = 0;
		foreach( name, method : struct.methods )
		{
			print "\tcase ", i, ": ";
			print "obj->", name, "(";
			foreach( p, type : method.params )
			{
				if( p )
					print ", ";
				typeinfo = GET_TYPE( type );
				if( typeinfo.typeval == "mpdt_Pointer" )
				{
					print "(", p, " < argcount ? args[", p, "] : mpd_Variant()).get_ptr<", typeinfo.subtype, " >()";
				}
				else
				{
					print "mpd_var_get<", typeinfo.nativetype, " >(", p, " < argcount ? args[", p, "] : mpd_Variant())";
				}
			}
			print "); break;\n";
			i++;
		}
		print "\t}\n";
		print "}\n";
	}
	
	// DUMP
	print "void ", struct.name, "_MPD::dump( MPD_STATICDUMP_ARGS(", struct.nativetype, ") )\n";
	print "{\n";
	print "\tMPD_DUMPDATA_USESTATICARGS;\n";
	if( struct.typeval == "mpdt_Pointer" )
	{
		print '\tprintf( "[', struct.name, '] %s", *pdata ? "-> " : "null" );\n';
		print '\tif( *pdata && level < limit )\n';
		print '\t\tmpd_DumpData<', struct.subtype, '>( **pdata, limit, level );\n';
	}
	else if( dict_size( struct.values ) )
	{
		print '\tprintf( "', struct.name, '::%s (%d)", value2name( *pdata ), (int) *pdata );\n';
	}
	else
	{
		print '\tprintf( "struct ', struct.name, '\\n" );\n';
		print '\tMPD_DUMPLEV( 0 ); printf( "{\\n" );\n';
		print '\tif( level < limit )\n';
		print '\t{\n';
		foreach( prop : struct.props )
		{
			if( prop.get === false )
				continue;
			prop_get = string_translate( prop.get, { _OBJ_ = "pdata" } );
			if( GET_TYPE( prop.type ).typeval == "mpdt_Enum" )
				prop_get = "(" $ GET_TYPE( prop.type ).nativetype $ ") " $ prop_get;
			print "\t\tMPD_DUMP_PROP( ", GET_TYPE( prop.type ).nativetype, ", ", prop.name, ", ", prop_get, " );\n";
		}
		print '\t}\n';
		print '\telse\n';
		print '\t{\n';
		print '\t\tMPD_DUMPLEV( 1 ); printf( "...\\n" );\n';
		print '\t}\n';
		print '\tMPD_DUMPLEV( 0 ); printf( "}" );\n';
	}
	print "}\n";
	
	print "\n";
}
print "#endif\n";

